[{"title": ["Радиоактивные предметы среди нас"], "post": {"text": "13 сентября 1987 года в жарком бразильском городе Гойяния произошла мелкая кража. Двое мужчин по имени Роберто Алвес и Вагнер Перейра, воспользовавшись отсутствием охраны, пробрались в заброшенный больничный корпус. Разобрав на металлолом странную медицинскую установку, они погрузили детали в тачку и покатили ее домой к Алвесу. Никто не знал, что это начало самого пугающего инцидента с радиоактивными материалами в гражданской сфере.Да, сотрудники Гойянского Института радиотерапии были в курсе, что при переезде в новое здание установленный в 1977 году громоздкий аппарат лучевой терапии остался на прежнем месте. Но собственник здания открыл имущественный спор с организацией. В дело вступили страховщики, при поддержке полиции запретившие вывозить оставшееся оборудование. На это один из совладельцев Института, Карлос Фигуеиредо Безеррил, только сказал напоследок, что на президенте страховой компании Лисио Боргесе будет лежать ответственность за то, что произойдет с «цезиевой бомбой».А цезиевая бомба, точнее — источник гамма-излучения в виде изотопа цезия-137, помещенного в капсулу с излучающим окошком и смонтированного в аппарате радиотерапии, в течение четырех месяцев пылилась в покинутом здании, пока ее не свинтили оттуда двое друзей-мародеров. Тем же вечером они приступили к разборке подвижной головки прибора, откуда в конце концов ими была извлечена злополучная капсула. Немного поблевав, друзья разошлись по своим делам: Перейра все же обратился в госпиталь, где ему диагностировали пищевое отравление, а Алвес на следующий день продолжил разборку капсулы. Несмотря на полученные непонятные ожоги, 16 сентября он успешно проковырял в окошке капсулы отверстие и вынул на кончике отвертки странный светящийся порошок. Попытавшись его поджечь, он в дальнейшем потерял интерес к капсуле и продал ее на свалку человеку по имени Девейр Феррейра.Ночью 18 сентября Феррейра увидел таинственный синий свет, исходящий от капсулы. Восхитившись невероятным феноменом, он тут же притащил столь замечательную вещь себе домой. Там он демонстрировал светящуюся капсулу своим родственникам и друзьям. Один из друзей 21 сентября доломал окошко капсулы, вытащив наружу несколько гранул вещества. Никто из них не знал, какой ящик Пандоры был ими взломан. Хлорид цезия-137 стал в буквальном смысле ходить по рукам.24 сентября брат Феррейры Айво утащил светящийся порошок к себе домой, рассыпав его на бетонный пол. Его шестилетняя дочь ползала по этому полу, жуя бутерброд и с восторгом обмазываясь необычным светящимся веществом…Параллельно с этим жена Феррейры Габриэла серьезно заболела. 25 сентября тот взял странную капсулу и перепродал ее на соседний разбор металлолома.Однако Габриэла оказалась настоящей героиней в этой истории. Уже получив смертельную дозу радиации в 5,7 Грей, она сопоставила свое заболевание, похожие недомогания у знакомых и странную вещь, принесенную мужем. 28 сентября она нашла в себе силы пойти на вторую свалку, вытащить злополучную капсулу и вместе с ней поехать в больницу. В больнице, конечно, пришли в ужас, быстро распознав назначение странной детали, но к счастью, женщина упаковала фонивший материал и заражение в больнице оказалось незначительным. Габриэла умерла 23 октября в один день с маленькой племянницей Феррейры. Кроме них умерли еще двое работников свалки, раскурочивших капсулу до конца.МАГАТЭ назвало инцидент в Гойянии самым кошмарным радиационным инцидентом в мире. Только по благоприятному стечению обстоятельств последствия оказались локальными, но потенциально они могли затронуть огромное количество людей в густонаселенном городе. Всего заражены оказались 249 человек, 42 здания, 14 машин, 3 куста, 5 свиней и 50000 рулонов туалетной бумаги. Власти вывезли с мест заражения верхний слой почвы и почистили территорию ионообменными реагентами. Маленькую дочь Айво пришлось хоронить в герметичном гробу под протесты местных жителей, не желавших захоронения ее радиоактивного тела на кладбище.В том же году мальчик из Мичигана по имени Дэвид Хан получил на десятый день рождения том «The Golden Book of Chemistry Experiments», который сделает его одиозным авантюристом,. Количество радиоактивных веществ, которое он наковырял из самых разных предметов, причем совершенно сознательно, поражает воображение. Торий, америций, тритий, радий и даже собственноручно собранный ядерный реактор из этих материалов — то, к чему он навязчиво стремился всю свою жизнь.Эти примеры показывают, что на самом деле в нашем быту до сих пор остается множество различных предметов, которые могли раньше считаться вполне безопасными, либо считались безопасными в руках специалистов, но из этих рук пошли гулять по другим, либо по какой-то причине оказались заброшенными, украденными и так далее.В принципе об этих предметах дает представление Интернет в виде обсуждений на специализированных форумах, зачастуюи с. Но все же я решил более-менее классифицировать все те высокоэнергетические предметы, которые до сих пор в ходу в нашем мире, чтобы люди не слишком восхищались разного рода свечением, не брали в руки странные штуковины с окошками и не сдавали их на металлолом (наверное, вообще худшее, что можно сделать!).Таким словосочетанием обозначается постоянно фосфоресцирующий состав, наносимый на все, что нужно видеть в темноте. До эры светодиодов, миниатюрных качественных лампочек и надежных элементов питания подсветить какую-нибудь шкалу прибора лампочкой было ненадежно. Куда как более дешево и безотказно действует светящаяся несколько десятилетий подряд краска. Достаточно нанести краску на стрелки аналоговых (а других и не было) приборов, выполнить ей деления шкал — и прибор становится читаемым днем и ночью. Самым, наверное, знакомым для людей моего поколения таким прибором является популярный советский компас Андрианова:Ну а в целом, очень многие вещи военного назначения, «старой закалки», выполнялись с помощью радиоактивной краски. Часы, водолазные часы, шкалы с приборных досок военной техники. Все это выполнено светящейся зеленым краской на основе радия-226. В основном это все-таки касается авиации и флота, причем середины ХХ века. Поэтому если вы коллекционируете подобные предметы, восстанавливаете ретро-технику, помните: женщины, наносившие эту краску на стрелки приборов в военное время, страдали от серьезных проблем со здоровьем. Вам это не нужно.Конечно, такие количества краски, которую вы не наносите сами, а всего лишь наблюдаете уже на излете ее активности, дают минимальное излучение, но я вот как-то морщусь, вспоминая детский восторг от близко поднесенного к лицу фосфоресцирующего компаса. Ну а если краска уже облупляется, то дышать такими микрочастицами вообще точно не стоит.Сегодня радиевая краска запрещена уже почти полвека, а в состав СПД теперь входит тритий. Он считается более безопасным, хотя и сложен в получении. Ежегодно производится около 400 г трития, причем стоимость доходит до $30000 за грамм.Необязательно работать на урановых рудниках для облучения себя повышенным фоном. Обычные граниты тоже могут давать превышение естественного фона. Все зависит от конкретного состава минералов.В России, на границе Иркутской области и Якутии, существует единственное в мире месторождение. Квота на добычу этого камня установлена республикой Саха-Якутия всего в 100 тонн в год. Поэтому изделия из него постоянно дорожают. Однако помимо марганца, дающего характерную окраску, в жилах могут содержаться примеси редкоземельных элементов и тория. Эти примеси могут давать сырью существенный фон. Маловероятно, но не исключено, что изделие из такого камня окажется неприятным источником излучения.Существуют, однако, гораздо более популярные, ныне уже не выпускаемые по объективным причинам, но все еще ходящие по рукам коллекционеров бытовые предметы из уранового стекла — вполне говорящее название, правда? Оно изготавливалось добавлением в стекло оксидов урана или ураната натрия. Помимо красивого зеленого цвета, предметы, отлитые из него, могут также испускать великолепное зеленое свечение под действием ультрафиолета. Изделия, изготовленные в СССР, обычно матово-зеленые либо коричневые, а сделанные в Европе — полупрозрачные, и называются на американском английском vaseline glass.Вы вполне можете вбить это словосочетание в поиске на ebay, и получите множество симпатичных и забавных сувениров из этого материала, испускающего множество быстрых и веселых бета-частиц. Энергия такого излучения невысока, но лучше любоваться этими вещами из-за стекла, а не держать на обеденном столе.Также вам могут встретиться в жизни некоторые неприятные торированные предметы. Упоминавшийся «Радиоактивный Бойскаут» активно (извините за каламбур) использовал в своих опытах калильные сетки туристических ламп. Удобная вещь, умеющая превращать нагревание топливом в свет посредством эффекта кандолюминесценции — переизлучения тепла в видимый спектр. Уже не выпускаются, но все еще продаются. Химик Карл Ауэр фон Вельсбах установил а начале ХХ века, что оптимальным составом для калильных сеток является 99% тория к 1% церия. Очень малоприятный состав, да еще для раскаленного добела сплава.Торий могут также содержать некоторые вольфрамовые электроды. Если когда-либо придется с такими работать — обратите внимание на красную маркировку, и имейте в виду, что часть перегретого при сварке материала испаряется.Отдельная проблема с торием лежит в области раритетной фототехники. Существует большое количество моделей старых объективов с торированной оптикой. Торирование использовалось в качестведо 1970-х годов.Если все предыдущее было недоразумением технологий первой половины XX века, когда еще не такое большое значение придавали радиоактивности предметов, то следующие устройства представляют серьезнейшую опасность и по идее вообще не должны попадаться вам в быту и вообще в какие-либо не те руки. Это — штатные источники излучения, находящиеся в специальных приборах и устройствах. Если вы нашли что-то подобное и не умеете с ним обращаться — вызывайте МЧС и не дожидайтесь наступления вашего персонального Чернобыля.Гамма-источники используются в качестве уровнемеров в каменоломнях и карьерах, в гамма-дефектоскопии и прочей промышленности.Сходный принцип действия с уровнемерами и у датчиков дыма. Радиоактивный источник постоянно облучает датчик напротив. Дым (твердые частицы) ослабляет поток, что замечается датчиком, и включается тревога. В датчиках дыма используется изотоп америция-241, хотя в старых советских РИД-1 применялся аж плутоний-239. Разбирать их или тем более выкидывать в мусор крайне не рекомендуется.И снова тот же самый принцип. Есть толщина чего-то, которая перекрывает путь ионизирующему излучению. Натабло загорается тревожная лампочка: «обледенение». На фото — датчик обледенения РИО-3, на отечественной авиации получил широкое распространение, поэтому вполне может внезапно встретиться на заброшенных аэродромах, военных базах тем, кто залезет туда посталкерить, с плачевными последствиями:Допустим, прочитав эту статью, вы запаниковали и побежалипокупать недорогой и сердитый армейский или геологический дозиметр на Авито. Тем самым вы приобретаете и невзрачный, маленький, но совсем не безобидный контрольный источник, для калибровки прибора:Это тоже радиоактивный источник, вполне серьезный и опасный для здоровья, несмотря на свою миниатюрность. Его нельзя терять, ломать, давить или выкидывать.Если вы думаете, что целью статьи было показать, как страшно жить — вовсе нет. Попробуйте посмотреть на это с другой стороны: вы предупреждены, и теперь не будете покупать для своих проектов на ардуино стильные аналоговые циферблаты от авиационных и флотских приборных панелей, поостережетесь сваривать ториевыми электродами и фотографировать на просветленный винтажный объектив. И тем более, чтобы заработать на все это денег — не потащите в металлолом найденный на каком-то заброшенном заводе пузатый гамма-источник с проушиной сверху.", "img": ["https://habrastorage.org/webt/tr/du/ew/trduewyrsagnoihngwpc38r3f00.jpeg", "https://habrastorage.org/webt/cq/hp/m5/cqhpm5cgeoiybdtmk-l6oaptl-g.jpeg", "https://habrastorage.org/webt/mp/kx/mt/mpkxmtufkxgx74nm92dtrwfq9qe.jpeg", "https://habrastorage.org/webt/pe/s3/xr/pes3xre5eojdrlohotq1pys2p_m.jpeg", "https://habrastorage.org/webt/6k/8d/8l/6k8d8lsplso02aozwclf5nnlmxc.jpeg", "https://habrastorage.org/webt/dh/zr/do/dhzrdo4gaqwnwpatiishcsiepqs.jpeg", "https://habrastorage.org/webt/xy/aw/ls/xyawlsjnwrx532jcsqvwxozmzym.jpeg", "https://habrastorage.org/webt/bu/kk/8w/bukk8wy8wtz6pm3nulsb3aene0m.jpeg", "https://habrastorage.org/webt/ym/kh/pv/ymkhpvwtbowrwg_ydoywzxyessu.jpeg", "https://habrastorage.org/webt/er/ru/rz/errurzievxlpbwjpbodye8roxr0.jpeg"]}}, {"title": ["Знай свой JIT: ближе к машине"], "post": {"text": "До того, как написанный нами код будет исполнен, он проходит довольно долгий путь.в своем докладе на РИТ++ 2018 разобрал каждый шаг на этом пути на примере движка V8. Заходите под кат, чтобы выяснить, что даёт нам глубокое понимание принципов работы компилятора и как сделать JavaScript код производительнее.Узнаем, является ли WASM серебряной пулей для повышения производительности кода, и всегда ли оправданы оптимизации.«Преждевременная оптимизация — корень всех бед», Дональд Кнут.Андрей Мелихов работает в компании Яндекс.Деньги, активно пишет на Node.js, а в браузере — меньше, поэтому ему ближе серверный JavaScript. Андрей поддерживает и развивает сообщество devShacht, заходите познакомиться наили.Сегодня мы будем говорить про JIT компиляцию. Думаю, вам это интересно, раз вы это читаете. Тем не менее, давайте уточним, зачем нужно знать, что такое JIT и как устроен V8, и почему недостаточно писать на React в браузере.В Википедии написано, что JavaScript — это высокоуровневый интерпретируемый язык программирования с динамической типизацией. Разберемся с этими терминами.Компиляция — когда программа поставляется в бинарном коде, и изначально оптимизирована под среду, в которой будет работать.Интерпретация — когда мы поставляем код, как есть.JavaScript поставляется, как есть — это интерпретируемый язык, как и написано в Википедии.Статическую и динамическую типизации часто путают со слабой и сильной типизацией. Например, С — это язык со статической слабой типизацией. У JavaScript слабая динамическая типизация.Что из этого лучше? Если программа компилируется, она заточена на ту среду, в которой будет исполняться, а значит —будет работать лучше. Статическая типизация позволяет сделать этот код эффективнее. В JavaScript все наоборот.Но при этом наше приложение становится все сложнее: и на клиенте, и на сервере появляются огромные кластеры на Node.js, которые прекрасно работают и приходят на замену Java-приложениям.Но каким образом это все работает, если изначально кажется, что оно в проигрыше.У нас есть JIT (Just In Time компиляция), которая происходит во время выполнения программы. О ней и будем говорить.Вы можете написать свой движок, но если вы будете двигаться к эффективному исполнению, то придете примерно к одной и той же схеме, которую я дальше покажу.Сегодня мы будем говорить о V8, и да, он назван в честь 8-цилиндрового двигателя.Как исполняется JavaScript?Парсинг превращает код в. AST — это отображение синтаксической структуры кода в виде дерева. На самом деле это удобно для программы, хотя и тяжело читать.Получение элемента массива с индексом 1 в виде дерева представляется в виде оператора и двух операндов: загрузить свойство по ключу и эти ключи.AST есть не только в движках. С использованием AST во многих утилитах пишутся расширения, в том числе:Например, крутая штука Jscodeshift, про которую пока не все знают, позволяет писать преобразования. Если вы изменили API у какой-то функции, то можете натравить на нее эти преобразования и внести изменения во всем проекте.Двигаемся дальше. Процессор не понимает абстрактное синтаксическое дерево, ему нужен. Поэтому дальше происходит преобразование через интерпретатор, потому что язык интерпретируемый.Так было, пока браузерах было немного JavaScript — подсветить строчку, что-то открыть, закрыть. Но сейчас у нас приложения — SPA, Node.js, и.Вместо интерпретатора появляется оптимизирующий JIT-компилятор, то есть Just-in-time компилятор. Ahead-of-time компиляторы работают до исполнения приложения, а JIT — во время. В вопросе оптимизации JIT-компилятор пытается угадать, как код будет исполняться, какие будут использоваться типы, и оптимизировать код так, чтобы он лучше работал.Такая оптимизация называется, потому что она спекулирует на знаниях о том, что происходило с кодом раньше. То есть если 10 раз было вызвано что-то с типом number, компилятор думает, что так будет все время и оптимизирует под этот тип.Естественно, если на вход попадает Boolean, происходит деоптимизация. Рассмотрим функцию, которая складывает числа.Сложили один раз, второй раз. Компилятор строит предсказание: «Это числа, у меня есть крутое решение для сложения чисел!» А вы пишете, и передаете в функцию строки  — у нас же JavaScript, мы можем и строку с числом сложить.В этот момент происходит деоптимизация.Итак, интерпретатор заменился на компилятор. Кажется, что на схема выше очень простой pipeline. В реальности все немного иначе.Так было до прошлого года. В прошлом году вы могли слышать много докладов от Google о том, что они запустили новый pipeline с TurboFan и теперь схема выглядит проще.Интересно, что здесь появился интерпретатор.Интерпретатор нужен, чтобы превратить абстрактное синтаксическое дерево в байткод, и предать байткод в компилятор. В случае деоптимизации он опять идет в интерпретатор.Раньше в схеме интерпретатора Ignition не было. Google изначально говорили о том, что интерпретатор не нужен — JavaScript и так достаточно компактный и интерпретируемый — мы ничего не выиграем.Но команда, которая работала с мобильными приложениями, столкнулась со следующей проблемой.В 2013-2014 году люди стали чаще использовать для выхода в интернет мобильные устройства, чем десктоп. В основном это не iPhone, а с устройств попроще — у них мало памяти и слабый процессор.Выше график первичного анализа 1 МБ кода до запуска интерпретатора. Видно, что десктоп выигрывает очень сильно. iPhone тоже неплох, но у него другой движок, а мы говорим сейчас о V8, который работает в Chrome.Таким образом время тратится — и это только анализ, а не исполнение — ваш файл загрузился, и он пытается понять, что в нем написано.Когда происходит деоптимизация, нужно снова исходный взять код, т.е. его надо где-то хранить. На это уходило много памяти.Таким образом у интерпретатора было две задачи:Задачи были решены переходом на интерпретатор с байткодом.. В SpiderMonkey стековая машина, там все данные лежат на стеке, а регистров нет. Здесь они есть.Не будем полностью разбирать, как это работает, просто посмотрим на фрагмент кода.Здесь написано: взять значение, которое лежит в аккумуляторе, и сложить со значением, которое лежит в регистре, то есть в переменной. Здесь еще ничего не известно о типах. Если бы это был настоящий ассемблерный код, то он бы писался с пониманием того, какие есть сдвиги в памяти, что в ней находится. Здесь же просто инструкция — возьми то, что лежит в регистреи сложи со значением, лежащим в аккумуляторе.Конечно, интерпретатор не просто берет абстрактное синтаксическое дерево и переводит его в байткод.Здесь также происходят оптимизации, например, dead code elimination.Если участок кода не будет вызван, он выкидывается и дальше не хранится. Если Ignition увидит сложение двух чисел, он их сложит и оставит в таком виде, чтобы не хранить лишнюю информацию. Только после этого получается байткод.Это самая простая тема.Холодные функции — это те, которые вызывались один раз или не вызывались совсем, горячие — это те, которые вызывались несколько раз. Сколько именно раз, сказать нельзя — в любой момент это могут переделать. Но в какой-то момент функция становятся горячей, и движок понимает, что ее надо оптимизировать.Схема работы.Это нормальный цикл, который происходит все время, но он не бесконечный. В какой-то момент движок говорит: «Нет, это невозможно оптимизировать», и начинает выполнять без оптимизации. Важно понимать, что нужно соблюдать мономорфность.— это когда на вход вашей функции всегда приходят одни и те же типы. То есть если у вас все время приходит string, то не надо передавать туда boolean.Но что делать с объектами? Объекты все object. У нас есть классы, но ведь они не настоящие — это просто сахар над прототипной моделью. Но внутри движка есть так называемые скрытые классы.Скрытые классы есть во всех движках, не только в V8. Везде они называются по-разному, в терминах V8 это Map.Все объекты, которые вы создали, имеют скрытые классы. Если выпосмотрите в профилировщик памяти, вы увидите, что там есть elements, где хранится список элементов, properties, где хранятся property, и map (обычно первым параметром), где указана ссылка на его на его скрытый класс.Map описывает структуру объектов, потому что в принципе в JavaScript типизация возможна только структурная, не номинальная. Мы можем описать, как выглядит наш объект, что за чем в нем идет.При удалении/добавлении свойств объектов Hidden classes у объекта меняется, присваивается новый. Посмотрим на коде.У нас есть конструктор, который создает новый объект типа Point.В Node.js можно запустить node —allow-natives-syntax. Тогда вы получите возможность писать команды в специальном синтаксисе, который, конечно, нельзя использовать в продакшене. Это выглядит так:Никто не гарантирует, что это завтра эти команды будут работать, их нет в спецификации ECMAScript, это всё для отладки.Как вы думаете, какой будет результат вызова функции %HaveSameMap для двух объектов. Правильный ответ — false, потому что у одного поле называется, у второго —. Это разные объекты. Это знание можно использовать для техники Inline Caches.Вызовем очень простую функция, которая возвращает поле из объекта. Кажется, вернуть единицу очень просто. Но если вы посмотрите спецификацию ECMAScript, вы увидите, что там огромный список того, что нужно сделать, чтобы получить поле из объекта. Потому что, если поля нет в объекте, возможно, оно есть в его прототипе. Может быть, это setter, getter и так далее. Все это нужно проверять.В данном случае в объекте есть ссылка на map, которая говорит: чтобы получить поле, нужно сделать смещение на единицу, и мы получим. Никуда не надо лазить, ни в какие прототипы, все рядом. Inline Caches использует это.Кажется, сейчас допускается 4 полиморфных состояний, но завтра их может быть 8. Это решают разработчики движка. Нам лучше оставаться в мономорфном, в крайнем случае, в полиморфном состоянии. Переход между мономорфным и полиморфным состояниями дорогой, потому что нужно будет сходить в интерпретатор, получить код заново и заново его оптимизировать.В JavaScript, не считая специфичных Typed Arrays, есть один типмассива. В движке V8 их 6:1. [1, 2, 3, 4] // PACKED_SMI_ELEMENTS — просто упакованный массив small integer. Для него есть оптимизации.2. [1.2, 2.3, 3.4, 4.6] // PACKED_DOUBLE_ELEMENTS — упакованный массив double элементов, для него тоже есть оптимизации, но более медленные.3. [1, 2, 3, 4, ’X’] // PACKED_ELEMENTS — упакованный массив, в котором есть объекты, строки и все остальное. Для него тоже есть оптимизации.Следующие три типа — это массивы того же типа, что первые три, но с дырками:4. [1, /*hole*/, 2, /*hole*/, 3, 4] // HOLEY_SMI_ELEMENTS5. [1.2, /*hole*/, 2, /*hole*/, 3, 4] // HOLEY_DOUBLE_ELEMENTS6. [1, /*hole*/, ’X’] // HOLEY_ELEMENTSКогда в ваших массивах появляются дырки, оптимизации становятся менее эффективными. Они начинают работать плохо, потому что невозможно подряд пройти по этому массиву, перебирая его итерациями. Каждый последующий тип хуже оптимизируетсяНа схеме все, что выше, быстрее оптимизируется. То есть все ваши нативные методы — map, reduce, sort — внутри хорошо оптимизированы. Но с каждым типом оптимизация становится хуже.Например, на вход пришел простой массив [,,] (тип — упакованный small integer). Чуть-чуть изменили этот массив, добавив в него double — перешли в состояние PACKED_DOUBLE_ELEMENTS. Добавляем в него объект — перешли в следующее состояние, зеленый прямоугольник PACKED_ELEMENTS. Добавляем в него дырок — переходим в состояние HOLEY_ELEMENTS. Хотим восстановить его в предыдущее состояние, чтобы он снова стал «хорошим» — удаляем все, что написали, и остаемся в том же состоянии… с дырками! То есть HOLEY_ELEMENTS справа внизу на схеме. Назад это не работает. Ваши массивы могут становиться только хуже, но не наоборот.Мы часто сталкиваемся с Array-Like Object — это объекты, которые похожи на массивы, потому что у них есть признак длины. На самом деле они как кот-пират, то есть вроде похожи, но в эффективности потребления рома котик будет хуже, чем пират. Точно так Array-Like Object похож на массив, но не эффективен.Два наших самых любимых Array-Like Object — это arguments и document.querySelectorAII. Есть такие красивые функциональные штуки.У нас появился map — мы его выдрали из прототипа и вроде бы можем использовать. Но если ему на вход пришел не массив, никакой оптимизации не будет. Наш движок не умеет делать оптимизацию по объектам.Что нужно сделать?С querySelectorAll то же самое — за счет spread мы можем превратить его в полноценный массив и работать со всеми оптимизациями.зависит от.В чем отличие?То есть в первом случае быстро пишем — медленно работаем; во втором медленно пишем — быстро работаем.Сборщик мусора тоже немножко ест время и ресурсы. Глубоко не погружаясь, дам самую общую базу.В нашей генеративной модели есть. Создаваемый объект попадает в пространство молодых объектов. Через какое-то время запускается очистка. Если объект невозможно достичь по ссылкам от корневого, то его можно собрать в мусор. Если объект еще используется, он перемещается в пространство старых объектов, которое чистится реже. Тем не менее в какой-то момент удаляются и старые объекты.Так работает автоматический сборщик мусора — он сам подчищает объекты, основываясь на том, что к ним нет ссылок. Это два разных алгоритма.Если в Node.js запустить профилирование потребления памяти, то получится примерно такой график.Сначала он скачкообразно растет — это работе алгоритма Scavenge. Потом происходит резкое падение — это Mark-Sweep-алгоритм собрал мусор в пространстве старых объектов. В этот момент все начинает немножко тормозить., поскольку не знаете, когда это произойдет. Вы можете только настроить размеры.Поэтому в pipeline есть стадия сборки мусора, которая потребляет время.Заглянем в будущее. Что делать дальше, как быть быстрее?На этой линейке размеры блоков примерно соотносятся в временем, которое он занимают.Первое, что приходит в голову людям, которые услышали про байткод — сразу подавать на вход байткод и декодировать его, а не парсить — будет быстрее!Проблема в том, что байткод сейчас разный. Как я уже сказал: в Safari один, в FireFox другой, в Chrome третий. Тем не менее разработчики из Mozilla, Bloomberg и Facebook выдвинули такой, но это будущее.Есть другая проблема — компиляция, оптимизация, и повторная оптимизация, если компилятор не угадал. Представим, что есть статически типизированный язык на входе, который выдает эффективный код, и значит уже не нужна повторная оптимизация, потому что то, что мы получили, уже эффективно. Такой вход можно только один раз скомпилировать и оптимизировать. Полученный код будет более эффективным и исполнится быстрее.Что еще можно сделать? Представим, что в этом языке есть ручное управление памятью. Тогда не нужен сборщик мусора. Линейка стала короче и быстрее.Догадываетесь, на что это похоже?примернотак и работает: ручное управление памятью, статически типизированныеязыки и быстрое выполнение.Является ли WebAssembly серебряной пулей?Нет, потому что он стоит за JavaScript. WASM пока сам ничего не может делать. У него нет доступа к DOM API. Он внутри движка для JavaScript — внутри того же самого движка! Он все делает через JavaScript, поэтому. Он может ускорить отдельные вычисления, но у вас обмен между JavaScript и WASM будет узким местом.Поэтому пока наш язык — это JavaScript и только он, и какая-то помощь из черной коробки.Можно выделить три вида оптимизации.●Есть статья \"\" Вячеслава Егорова, который когда-то разрабатывал V8, а сейчас разрабатывает Dart. Кратко перескажу её историю.Была библиотека на JavaScript, которая работала не очень быстро. Какие-то ребята переписали ее на Rust, скомпилировали и получили WebAssembly, и приложение стало работать быстрее. Вячеслав Егоров как опытный JS-разработчик решил им ответить. Он применил алгоритмические оптимизации, и решение на JavaScript стало сильно быстрее решения на Rust. В свою очередь те ребята это увидели, сделали те же самые оптимизации, и снова выиграли, но не сильно — зависит от движка: в Mozilla выиграли, в Chrome — нет.Мы сегодня не говорили про алгоритмические оптимизации, и фронтэндеры о них обычно не говорят. Это очень плохо, потому что. Вы просто убираете ненужные вам циклы.●Это то, о чем мы сегодня говорили: наш язык интерпретируемый динамически типизированный. Понимание того, как работают массивы, объекты, мономорфность. Это надо знать и писать правильно.●Это самые опасные оптимизации. Если ваш очень умный, но не очень общительный, разработчик, который применил очень много таких оптимизаций, и никому о них не рассказал, не написал документацию, то, если вы откроете код, то увидите не JavaScript, а, например, Crankshaft Script. То есть JavaScript, написанный с глубоким пониманием того, как работал движок Crankshaft два года назад. Это все работает, но сейчас уже не нужно.Поэтому такие оптимизации обязательно должны быть задокументированы, покрыты тестами, доказывающими их эффективность в данный момент. За ними надо следить. К ним нужно переходить только в тот момент, когда вы где-то реально замедлились — прямо никак не обойтись без знания таких глубинных устройств. Поэтому кажется логичной знаменитая фраза Дональда Кнута.Не нужно пытаться внедрить какие-то жесткие оптимизации только потому, что вы про них прочитали положительные отзывы.Таких оптимизаций надо бояться, обязательно документировать и оставлять метрики. Вообще всегда собирайте метрики.", "img": ["https://habrastorage.org/webt/iy/2r/ke/iy2rkenolmtnchwu_whyurlrw80.jpeg", "https://habrastorage.org/webt/rd/-o/q7/rd-oq7q2m9bjipzyqo1l3jrlqti.jpeg", "https://habrastorage.org/webt/le/oy/yg/leoyyg4b8ru_n_2djyzkg6hbe1a.jpeg", "https://habrastorage.org/webt/wj/n0/us/wjn0ustvepwu4kmulit2v6xxtsy.jpeg", "https://habrastorage.org/webt/3i/1p/y-/3i1py-dcnwj6enma0zveqcv67tq.jpeg", "https://habrastorage.org/webt/wl/ct/8e/wlct8ejmclt1hoqiinm9jwbayyg.jpeg", "https://habrastorage.org/webt/i6/cj/zh/i6cjzhohklmcdyenrvrjmdw6fyk.jpeg", "https://habrastorage.org/webt/h4/bf/d-/h4bfd-9twvmsqlk-euvv34he48u.jpeg", "https://habrastorage.org/webt/zp/ma/oo/zpmaoosvxia3btjyxstyyaq5nnc.jpeg", "https://habrastorage.org/webt/qz/wo/2x/qzwo2xg_2ju3fafi6hb4y8ssm24.jpeg", "https://habrastorage.org/webt/w5/tu/u4/w5tuu4i3irrzbsck7e2ohdnzgai.jpeg", "https://habrastorage.org/webt/7e/ms/yd/7emsydqevnntiujqhsa_rtrvdec.jpeg", "https://habrastorage.org/webt/8b/0l/zi/8b0lzi2wb8mqqbsetc88t2lsale.jpeg", "https://habrastorage.org/webt/kx/kv/l5/kxkvl5nr4j2cxe5d6kuhwegffnk.jpeg", "https://habrastorage.org/webt/yr/ky/sk/yrkyskmi_annr0w3jnps13y5alc.jpeg", "https://habrastorage.org/webt/vu/is/fh/vuisfhp0lin_et7pozzqny-g6q0.jpeg", "https://habrastorage.org/webt/vv/4g/i6/vv4gi6zw_zrtlsgl5lsb7ebqqza.jpeg", "https://habrastorage.org/webt/mk/1t/vr/mk1tvrgq5h2l7mp72g4p6vg6wlm.jpeg", "https://habrastorage.org/webt/4i/ia/bs/4iiabsuemjg-7nu0yiywvlsd9hc.jpeg", "https://habrastorage.org/webt/02/dn/nj/02dnnjtvkqa7fn87e8ioa3kwgpy.jpeg", "https://habrastorage.org/webt/ck/53/ny/ck53nyrhuj7ihixe7vi7ds_vjvc.jpeg", "https://habrastorage.org/webt/qb/rw/zf/qbrwzflusrdjbboqwgsth1ezozu.jpeg", "https://habrastorage.org/webt/uf/f4/u_/uff4u_bbjb3elwmhhor3lv2tiwm.jpeg", "https://habrastorage.org/webt/i7/_j/ul/i7_juluulfkpnerhxwnif4tjnoa.jpeg", "https://habrastorage.org/webt/fg/8e/1c/fg8e1csx9x1mo4y2hlvuzzjvgem.jpeg", "https://habrastorage.org/webt/ac/rd/1l/acrd1lqmylajg5b3crff97j-9h8.jpeg", "https://habrastorage.org/webt/yp/uj/1b/ypuj1bus74-w473vsmczkvgwi0s.jpeg", "https://habrastorage.org/webt/zi/_3/ya/zi_3yao0kydtrtagdizs4oklcr0.jpeg", "https://habrastorage.org/webt/ts/vc/fz/tsvcfzihzzewt_udo-39cjqea8c.jpeg", "https://habrastorage.org/webt/7i/lf/xd/7ilfxdfdm0dbkdknw0ecpushflo.jpeg", "https://habrastorage.org/webt/e0/36/ut/e036utlk16ybet20xbica5qziey.jpeg", "https://habrastorage.org/webt/qf/cd/8h/qfcd8hamo_iv_fznbksf35whw9q.jpeg", "https://habrastorage.org/webt/ke/ip/pd/keippdq9hmpt3ueb7-kgd-zt1ig.jpeg", "https://habrastorage.org/webt/yx/xo/1u/yxxo1uda9lkq9fim_uy9zzylxlw.jpeg"]}}, {"title": ["Встречайте DevOpsConf Russia"], "post": {"text": "В 2015 году в рамках фестиваля РИТ++ мы возродили конференцию RootConf, чтобы привлечь интерес к современным инструментам эксплуатации и подходам DevOps.DevOps — это объединение процессов разработки, тестирования и эксплуатации вместе. Весь технологический процесс развития проекта не состоит из отдельных этапов, все части тесно переплетаются и идут параллельными курсами, а сам процесс в парадигме DevOps становится совсем другим.", "img": ["https://habrastorage.org/webt/g7/bo/pp/g7boppibyspam67qr2qg-ykh6ym.png", "https://habrastorage.org/webt/_u/0g/jc/_u0gjcnal3rowd-uwiqllcimzbq.png", "https://habrastorage.org/webt/tr/dn/mv/trdnmv8ipgnneraanl6dmllx9zs.png", "https://habrastorage.org/webt/g7/1p/sz/g71pszlpsrtsmdjjktqrpjlhfps.png", "https://habrastorage.org/webt/l4/hq/hx/l4hqhxettdh6yk6whnvozckbrxe.png"]}}, {"title": ["Возвращение советской станции. Анализ и документы"], "post": {"text": "Это продолжение истории советской межпланетной станции, что снова к нам вернется. Начало.Чем мне нравятся подобные дискуссии, так это тем, что при мозговом штурме можно многое уточнить. И новая информация действительно интересная.Для начала, Игорь Лисов (обозреватель журнала «Новости Космонавтики») верно указал на то, что в прошлой статье я не проанализировал судьбу всех объектов, что оказались в космосе в 1972 году. Я процитирую его анализ полностью:С первыми объектами мы, по сути, разбирались в прошлой статье. Замечание про разгонный блок тоже логичное. Действительно, после завершения работы блока «Л» он должен был отделиться от межпланетной станции и сойти с орбиты, так как был очень легким/громоздким.Гораздо интереснее появление объекта 6073. Первая TLEшка на него (что я нашел) датируется 5 июля. Через три месяца после запуска станции. Это достаточно близко к дате достижения станцией Венеры, если бы она вышла на межпланетную траекторию. Ее близнец, «Венера-8», вошла в атмосферу Венеры 22 июля.Если предположить, что станция все это время работала (почему бы и нет?), находясь в солнечной ориентации, то также можно предположить, что в автоматике станции подобное разделение было прописано, как реакция на прекращение работоспособности перелетного блока. Например, окончания запасов азота для ориентации. Режим работы на орбите Земли должен отличатся от межпланетного, и азот уходит куда быстрее.Но это только версия. Тем более что есть информация, противоречащая ей. На сайте Анатоля Зака есть снимок станции, что передал ему астрофотограф Ральф Вандерберг в 2011 году.И по нему выходит, что станция все-таки не разделилась.Впрочем, лично мне анализ Игоря Лисова кажется более логичным. Он подкреплен баллистическими коэффициентами и оценкой яркости. Есть информация, что яркость объекта слабо меняется от фазы. Что подтверждает версию о шаре. Но тогда не ясно, что сфотографировал Ральф.Конечно, это все мало меняет именно для нас. Мы и так ждали возвращение спускаемого аппарата. Он сейчас и летает в космосе. Ситуация может измениться только относительно времени его возвращения. Спускаемый аппарат одновременно тяжелый и компактный. Такие слабо тормозятся об атмосферу. Я вел прошлую оценку исходя из мнения, что станция может пережить следующий пик солнечной активности только после заметного падения апогея. После которого долго не пролетает. Спускаемый аппарат может дотянуть и до следующего пика. То есть время его жизни может увеличиться еще на 11 лет. Дальше уже вряд ли.Тем не менее, в истории со станцией есть определенная недосказанность. На момент прошлой статьи я работал в архиве, и хоть основной целью была Луна, заказал и несколько подшивок документов, посвященных исследованию Венеры. Честно скажу, целью был поиск документов, в которых пояснялось, что случилось с разгонным блоком. Должны же были тогда разобраться, почему он выключился раньше времени! Увы. Именно этого я не нашел. В архиве оказалось только техническое задание на станцию В-72, два отчета с заседания госкомиссии и одно испытание парашюта станции. Их я вынес в ссылку в конце статьи. Документы оказались интересными хотя бы тем, что отвечают на часть вопросов, что задавали о посадке станции. А именно:Нет. Возможно, так и будет. Мало ли, что произошло с ним за эти годы. Но если оценивать исключительно по техническому заданию, лично я нахожу это маловероятным.Вот цитата из ТЗ:Даже при 70 атм расчетные перегрузки были 100 g. При одной атмосфере они должны быть заметно выше. При том, что посадка на утрамбованный песок и для Земли допустимое условие.Здесь, к сожалению, плохие новости. Точнее я не могу сказать, какой там применен датчик. В ТЗ это не описывалось. Только отметили, что механизм отстрела крышки парашютного контейнера изменен. В венерианской атмосфере парашют выходил на высоте 64 км от поверхности Венеры. Это около 0.1атм, что соответствует 16 км от поверхности Земли. То есть, если бы он вышел, высота была бы достаточная для торможения.Теперь ложка дегтя. Мною был обнаружен отчет с испытанием парашюта.Если быть кратким, то при нагреве парашюта со станций В-72 было обнаружено, что при высоких температурах он начинает гореть и превращаться в стекловидную массу с низкой прочностью. Что, конечно, было бы катастрофой. Но было выяснено, что в постановке эксперимента – ошибка, и подобный процесс происходит только в кислородной атмосфере. В углекислой атмосфере Венеры никакого окисления не происходит, и парашют не теряет свою прочность.Другими, словами в нашей атмосфере из-за высокой температуры, полученной при входе в атмосферу, парашют может начать окисляться, а при окислении выделятся еще больше энергии. Теплозащита станции должна выдержать, а вот парашют превратится в стекловидную массу. Увы, даже если там некий механический датчик, то даже при его срабатывании уже может быть нечего выпускать.Сейчас — конечно. Но когда спускаемый аппарат будет накручивать последние витки вокруг Земли, ситуация сильно изменится. Для начала, вход в атмосферу произойдет в районе перигея. Долготу точки входа можно будет понять по координатам долготы восходящего узла. В целом, предсказать последние витки аппарата можно будет уже по TLEшкам. И, соответственно, выдать координаты входа в атмосферу для нескольких следующих витков. Спускаемый аппарат сферический — аэродинамического качества нет. Из-за чего координаты посадки будут просто немного смещены относительно точки входа, по направлению витка.Так что будем ждать.Материалы 72 года я вынес в отдельную.", "img": ["https://habrastorage.org/webt/gu/vz/oq/guvzoqlpb3qduekyvm9bizshkei.jpeg", "https://habrastorage.org/getpro/habr/post_images/262/638/2ff/2626382ff2361657d315ea078a68adc7.jpg", "https://habrastorage.org/webt/7d/ml/l3/7dmll3dtf1utn2q-hddwgy0qcyy.jpeg", "https://habrastorage.org/webt/ts/az/v2/tsazv2v4xrksv8qzowhlzdxh1ye.jpeg"]}}, {"title": ["Reddit взломан, утекла база с паролями и email за 2005-2007 годы"], "post": {"text": "Один из крупнейших социальных хабов интернета, Reddit, в среду заявил о проникновении в свою сеть киберпреступников.Злоумышленникам удалось получить доступ к различным данным: базе с email-адресами и паролями пользователей, зарегистрированных с 2005 по 2007 год, электронные письма пользователей, исходные коды, внутренние файлы и «все данные Reddit с 2007 года». Сообщается, что инцидент имел место между 14 и 18 июя 2018 года, и проникновение обнаружили 19 июя. Злоумышленники скомпрометировали нераскрываемое число сотрудников Reddit и проникли в «несколько систем», получив доступ к данным.Представители Reddit официально признали факт взлома и изложили суть произошедшего в:Хакеры добрались вчастности до бэкапа БД, датированного маем 2007 года. Reddit был основан и заработал в 2005 году, и этот бэкап БД содержал всю информацию за два года работы сайта, в том числе весь его контент и сообщения пользователей (включая личные), а также хешированные пароли и соли для хэшей, актуальные на момент создания бэкапа.Представители компании утверждают, что преступники не получили доступа на запись на скомпрометированных серверах, а значит, не могли модифицировать какие-либо важные данные. Тем не менее, разработчики все равно усилили безопасность (в частности сменили ключи API) и мониторинг.Так же хакерам повезло добраться и до более свежих email-дайджестов, отправленным между 3 июня и 17 июя 2018 года. Эти подборки рекомендуемых постов для читателей портала содержат информацию о пользовательских именах и связанных с ними почтовых адресах.Reddit использует обычную двухфакторную аутентификацию на основе SMS, чтобы защитить свои учетные записи сотрудников, требуя ввода одноразового кода доступа вместе с именем пользователя и паролем.Однако, как сообщил Reddit, именно эти текстовые сообщения хакеры и перехватилиКейт Грэм (Keith Graham), главный технический специалист, прокомментировал ситуацию для: «Хотя аутентификация на основе SMS популярна и гораздо более безопасна, чем просто пароль, широко известно, что она достаточно уязвима для злоумышленников, которые, используя ее бреши, уже взломали многих знаменитостей.Грэхем объяснил, что киберпреступники способны получить доступ к номеру телефона, на который отправляется двухфакторный код SMS:: «Например, киберпреступник просто может предоставить представителю компании мобильной связи адрес жертвы, последние 4 цифры номера социального страхования и, возможно, кредитную карту для трансфера номера мобильного телефона.«Это та информация, которая широко доступна в даркнете благодаря предыдущим утечкам баз данных, например Equifax».Некоторые вопросы вызывает тот факт, что если инцидент с безопасностью был обнаружен еще 19 июня 2018 года, то публично о нем сообщили лишь 1 августа 2018, т.е. более чем месяц спустя. Еще один интересный момент, вк новости об инциденте администраторы ресурса рассказали, что \"своего самого, и он начал работу всего\".На данный момент скомпрометированные аккаунты пользователей всё ещё действуют, но их обладателям отправлены письма с инструкцией об изменении пароля.Кроме того, администраторы реддита ввели усовершенствованную двухфакторную аутентификацию для доступа к конфиденциальным данным. Пользователям Reddit рекомендовано сбросить и установить стойкий уникальный пароль и настроить подтверждение входа помощью кода, генерируемого приложением, а не через SMS.", "img": ["https://habrastorage.org/getpro/habr/post_images/12a/978/54b/12a97854b53534447956b621d35293c3.jpg"]}}, {"title": ["По следам взлома tp-link"], "post": {"text": "Взлом с подменой dns достаточно распространенный способ атаки. В первую очередь из-за его простоты. Суть атаки в изменении адреса dns в настройках сетевого оборудования жертвы на адрес dns-сервера злоумышленника с целью возврата ложных ip. А уже далее, кто во что горазд — от банальных фишинговых страничек соцсетей для кражи паролей до якобы провайдерской заглушки с требованиями оплаты.Самое интересное во всем этом я считаю способы, с помощью которых боты, так или иначе, попадают на роутеры. И сегодня я про один из таких способов расскажу.Что имеем:Что нужно:Выяснить, каким способом был получен доступ к устройству.Первым делом на тестовом пациенте были опробованы все известные старые баги, которые нашлись в гугле. Конечно же ничего не сработало.Был найден скрипт на гитхабе () который позволяет удаленно, от рута, выполнять команды на моделях C20i и C2. Немного не то, что нам нужно, но задало верное направление.Во всех функциях были одинаковые «оболочки» для запросов — это POST запросы на url( и 7), \"\" и особый.Скачиваем с официального сайта tp-link исходные коды нашей прошивки и распаковываем. Т.к. линейка роутеров одна, то и ПО должно быть хоть чуточку похожим, верно?Бинго. Название файла как бы намекает, что дальше будет очень интересно. Находим в коде строчку, в которой видели заветное «cgi?2». Ниже приведена целиком функция:Эта функция при выполнении вызывает другую — getUsrName().Функция получения логина:Но просто с логином ничего не сделать. Нас интересует пароль. Мы знаем, что логин хранится в переменной adminName, внутри объекта USER_CFG. Поиск по исходникам дал следующие результаты: (оставлю только нужный результат)Открываеми находим в нем следующий фрагмент кода:Тут у нас хранится уже известная нам переменная «AdminName» и рядышком — AdminPwd. Похоже на правду.Теперь нам осталось сформировать корректный POST-запрос, на который роутер нам ответить нужными данными. Обратимся снова к скрипту с гитхаба и посмотрим, как сделано там:По аналогии формируем свой запрос:Ииииии отправляем. В Wireshark'e пакет выглядит вот так:Смотрим ответ:Внимательный читатель заметит, что POST-запрос был отправлен к \"/cgi?1\", а не как в скрипте к \"/cgi?2\". Всё верно. Нам нужно всего лишь узнать пароль. Получив данные для авторизации можно заниматься уже форменным безобразием.Авторизуемся:И уже авторизованным сдираем любые данные, какие мы только посчитаем важными, посмотрев в файлике reduced_data_model.xml:На данный момент исходные коды роутера C20v4 убраны с сайта Tp-Link и выложены вместо них коды V5. Но официальной прошивки пока, к сожалению, нет.Хорошая новость: Данная уязвимость эксплуатируется только, если веб доступ открыт для всех.Плохая новость: чьи-то боты уже стучаться по внешним адресам с правильными запросами.Помимо моделиданной уязвимости так же подвержена модель", "img": []}}, {"title": ["Реализация PPPOS на stm32f4-discovery"], "post": {"text": "Однажды передо мной возникла задача обеспечить выход в сеть Интернет на STM32 имея для этого только COM порт. Для решения этой задачи мне понадобился PPP, или, еcли быть точным, PPPoS (англ. Point-to-Point Protocol over Serial — один из способов реализации PPP, используется при подключении через COM-порт).В процессе решения поставленной передо мной задачи я столкнулся с некоторыми трудностями, одна из которых недостаточное, на мой взгляд, освещение вопросов связанных с PPPoS в сети Интернет. Этим постом я постараюсь закрыть обозначенный пробел, на сколько позволят мои скромные знания.Статья описывает создание проекта для System Workbench for STM32 с нуля. Показывает пример работы с UART. Есть примеры кода для реализации PPP. Ну и конечно, пример отправки сообщения на соседний компьютер.PPP (англ. Point-to-Point Protocol) — двухточечный протокол канального уровня (Data Link) сетевой модели OSI. Обычно используется для установления прямой связи между двумя узлами сети, причём он может обеспечить аутентификацию соединения, шифрование и сжатие данных. Используется на многих типах физических сетей: нуль-модемный кабель, телефонная линия, сотовая связь и т. д.Часто встречаются подвиды протокола PPP, такие, как Point-to-Point Protocol over Ethernet (PPPoE), используемый для подключения по Ethernet, и иногда через DSL; и Point-to-Point Protocol over ATM (PPPoA), который используется для подключения по ATM Adaptation Layer 5 (AAL5), который является основной альтернативой PPPoE для DSL.PPP представляет собой целое семейство протоколов: протокол управления линией связи (LCP), протокол управления сетью (NCP), протоколы аутентификации (PAP, CHAP), многоканальный протокол PPP (MLPPP)..Для решения поставленной задачи нам понадобится:Первым делом открываем STM32CubeMX и создаем там новый проект под нашу плату stm32f4-discovery. Включаем RCC, Ethernet (ETH), SYS, USART2, USART3, после чего включаем FREERTOS и LWIP.Для диагностики нам понадобятся светодиоды на плате. По этому настроем ноги PD12-PD15 как GPIO_Output.На вкладке Clock Configuration настраиваем частоту, как на картинке ниже.Далее, на вкладке Configuration настраиваем порты USART. Мы будем работать с ними в режиме DMA. У нас два порта USART, один мы будем использовать для передачи и получения данных по протоколу PPP, второй для логирования. Чтобы они заработали нам нужно настроить DMA на RX и TX для обоих портов. Для всех ножек настройки DMA приоритет ставим «Medium». Для USART2 ножке RX устанавливаем режим «Circular». Остальные настройки оставляем по-умолчанию.Также потребуется включить глобальное прерывание для обоих портов на вкладке «NVIC Settings».На этом первоначальная настройка проекта в STM32CubeMX завершена. Сохраняем файл проекта и делаем генерацию кода для System Workbench for STM32.Теперь проверим, что выгруженный код компилируется и работает. Для этого в файле main.c в функции «StartDefaultTask» заменим тело бесконечного цикла for(;;) на код включения и выключения светодиодов.Должно получиться так:Компилируем прошиваем и смотрим. На плате должны моргать все четыре светодиода.Следующая наша задача это проверить правильность работы наших USART.Первое, что нам нужно сделать это подключить наши FT232 к discovery. Для этого смотрим на какие ножки разведены USART интерфейсы. У меня это PD6 и PD5 для USART2_RX и USART2_TX соответственно.А также PD9 и PD8 для USART3_RX и USART3_TX соответственно.Кроме того нам понадобится ножка GND.Находим эти выводы на плате и соединяем с выводами FT232 при этом вывод GND на плате может быть любым, вывод RX на плате должен быть соединен с выводом TX на FT232, а вывод TX на плате должен быть соединен с выводом RX на FT232. Остальные выводы не используются.Осталось подключить наши FT232 к USB портам компьютера, а также подключить к компьютеру саму плату discovery через разъем miniUSB (не путать с microUSB).После подключения FT232 основная ОС установит для них драйвера, после чего эти устройства нужно будет пробросить в гостевую Windows на виртуальной машине.Теперь добавляем программный код, который нужен для работы наших USART. Для этого мы добавим четыре файла: usart.h, usart.c, logger.h, logger.c.Содержимое файлов:Usart нам нужен для передачи и получения данных по usart2. Он будет нашим основным интерфейсом общения с PPP-сервером.Logger нам нужен для реализации логирования, путем посылки сообщений в терминал. Функция void usart_Open(void) формирует очередь и запускает задачу по обслуживанию этой очереди. Эту функцию нужно выполнить до начала работы с USART. Дальше все просто, функция bool usart_Send(char* bArray, int size_bArray) отправляет данные в порт, аuint16_t usart_Recv(char* bArray, uint16_t maxLength) получает их из очереди, в которую их любезно сложила функция void usart_rxTask(void).Для логера все еще проще, там не требуется получения данных следовательно, ни очереди, ни задачи обслуживания очереди не нужно.В начало файланужно добавить несколько дефайнов описывающих тип bool, отсутствующий в языке C.Теперь пришло время проверить работоспособность полученного кода. Для этого в файле, изменим код уже известной нам задачи «StartDefaultTask»Кроме того нужно дать побольше памяти стеку нашей задачи. Для этого в вызове функции osThreadDef(), файла main.c, нужно 128 исправить на 128*10 чтобы получилось так:Компилируем и прошиваем. Светодиоды моргают так же как и в предыдущей задаче.Чтобы увидеть результат наших трудов нужно в нашей виртуальной машине запустить программу Terminal. Один экземпляр программы для логирующего порта, второй для основного. Посмотрите в диспетчере устройств какие номера портов были назначены вашим FT232. Если были назначены номера более 10, переназначьте.При запуске второго экземпляра программы может возникнуть ошибка, закройте окно с ошибкой и продолжите работать с программой.Для обоих портов устанавливаем соединение на 115200 бод, data bits — 8, parity — none, stop bits — 1, handshaking — none.Если вы все сделали правильно, то в окне терминала для usart2 будет передаваться сообщение «Send message». В окно терминала для логера будет дублироваться это же сообщение только с префиксом «SEND — »Если в окне терминала для usart2 вы вобьете какой-то текст в поле «Send» и нажмете соответствующую кнопку, справа от этого поля, то в окне логера вы увидите это же сообщение с префиксом «RECV — »На картинке ниже: слева — логер, справа — usart2.В рамках этой задачи мы поднимем PPP-соединение. Первым делом включаем использование PPP, меняем значение дефайна PPP_SUPPORT в файле ppp_opts.h на 1. Затем переопределяем нужные нам дефайны в файле lwipopts.h,При этом старые дефайны нужно закомментировать.Теперь изменяем файл lwip.c, вставляем в блок «/* USER CODE BEGIN 0 */» следующий код:Затем в функцию MX_LWIP_Init(), в блок «/* USER CODE BEGIN 3 */» добавляем вызов функции pppConnect().Кроме того нужно увеличить размер кучи, для этого в файле FreeRTOSConfig.h нужно закомментировать дефайн configTOTAL_HEAP_SIZE, а в конце файла, в блоке /* USER CODE BEGIN Defines */ объявить его с новым значением.А также в файле usart.c изменить значение дефайна Q_USART2_SIZE на 2048.Настройка соединения начинается с функции MX_LWIP_Init() она создана автоматически мы лишь добавили в нее вызов функции pppConnect(). В этой функции запускаются задачи обслуживающие PPPOS соединение. Функции pppos_create() нужно передать адреса функций, которые будут обслуживать отправку сообщений и вывод информации об изменении статуса соединения. Для нас это функции ppp_output_cb() и ppp_link_status_cb() соответственно. Кроме того в функции pppConnect() будет запущена задача по обслуживанию полученных сообщений. В конце своей работы функция pppConnect() дождется установления соединения с сервером, после чего завершит свою работу.Работа с сетью будет осуществляться на более высоком уровне, как только LWIP решит, что нужно отправить сообщение в сеть, автоматически будет вызвана функция ppp_output_cb(). Ответ из сети будет получен функцией PppGetTask(), в рамках задачи по обслуживанию входящих сообщений, и передан в недра LWIP. Если изментися статус соединения то автоматически будет вызвана функция ppp_link_status_cb().И наконец мы изменим задачу StartDefaultTask. Теперь она должна иметь такой вид:Готово, можно компилировать и прошивать.На этом этапе нужно запустить сервер PPP. Для этого нужно сначала развернуть виртуалку с ОС Linux. Я использовал Ubuntu 16.04 x32. После установки операционной системы нужно настроить использование COM порта.В этой части нам не нужна виртуальная машина с Windows, можно ее смело выключить. Оба FT232 подключаем в Linux.В Linux прежде чем начинать работу с COM портом нужно разрешить пользователю его использовать. Для этого выполним следующую команду:где USERNAME — имя текущего пользователя.Чтобы посмотреть доступные в системе COM порты нужно выполнить команду:Мы видим, что в системе присутствуют два порта ttyUSB. Мы не можем сразу сказать какой из них logger, а какой usart2. Просто нужно их проверить по очереди.Сначала выполним команды для чтения из одного порта:затем из другого:Где увидим такую картину тот и есть logger.Можно оставить это окно, оно нам не будет мешать.Далее нужно разрешить пакетам отправленным из нашей платы покидать пределы своей подсети. Для этого нужно настроить iptables. Выполняем следующие действия:1. Откроем новое окно консоли2. Нужно узнать свой ip и имя сетевого интерфейса (выполните команду)3. Выполните команды настройки natгде enp0s3 — имя сетевого интерфейса192.168.10.196 — ваш IP адрес/proc/sys/net/ipv4/ — путь к соответствующему файлу.Эти команды можно переписать в пакетный файл и выполнять его каждый раз перед запуском PPP сервера. Можно добавить и в автозапуск, но я этого не делал.Теперь мы готовы к запуску сервера, осталось только создать файл настроек. Я назвал его «», предлагаю использовать следующие настройки:Переписываем настройки в файл после чего можно запускать сервер. Это делается командойСервер PPPD должен быть запущен до старта discovery, по этому после старта PPPD нужно нажать на кнопку «Reset» расположенной на плате.Если вы все сделали правильно, то увидите такую картину:Слева запущенный pppd, справа logger.На этом этапе нам понадобятся обе виртуалки. Linux для pppd и Windows для приема пакета. Для упрощения задачи нужно чтобы обе машины были в одной подсети, идеальным решением будет указать в настроках сети VirtualBox для обоих машин соединение типа «Сетевой мост», а в Windows отключить брандмауэр.Запускаем виртуалки и настраиваем ppp соединение платы discovery с pppd. На Windows узнаем IP адрес машины (команда ipconfig), у меня он получился 192.168.10.97.Запускаем Packet Sender и настраиваем его следующим образом:Теперь снова изменим задачу StartDefaultTask, в файле.В качестве значения переменной addr используем адрес Windows машины, номер порта 6565.Отправляемое сообщение «Test message TCP/IP.», ответ «The message is received.»Здесь можно увидеть, что функции PPP непосредственно не используются для отправки и приема сообщений. Вся работа происходит на более высоком уровне, а наши функции вызываются автоматически.Компилируем и прошиваем.Результат соединения с pppd видим на Linux машине:Полученные запросы и отправленные ответы можно увидеть в программе Packet Sender на Windows-машине:Ну, вот, собственно и все, отправленный нами пакет из платы discovery отправился в COM порт, попал на pppd сервер, был отправлен на порт 6565 Windows машины, там он был успешно получен, в ответ на него был отправлен другой пакет, который прошел этот путь в обратном направлении и был успешно принят на плате. С таким же успехом вы сможете отправлять сообщения на любую машину в сети Интернет.→ Полный код проекта можно скачать", "img": ["https://habrastorage.org/webt/vr/jk/ve/vrjkveavft5ry-oasa7h2e07rwe.png", "https://habrastorage.org/webt/9c/v2/rv/9cv2rv-_8yf5w67mr7bw7ynp1vk.png", "https://habrastorage.org/webt/-s/bb/lk/-sbblkybmbdz1wrftiow38tq4eg.png", "https://habrastorage.org/webt/sd/cc/qy/sdccqyreetba7g_m8yq_gypc-ge.png", "https://habrastorage.org/webt/96/s8/9u/96s89uloxfrdtxd0scqvcyb-zng.png", "https://habrastorage.org/webt/ss/_d/8l/ss_d8lzdxneoj5mjasvmyhhhxiu.png", "https://habrastorage.org/webt/qj/yh/yo/qjyhyoohdofxtqedphuhzq7qcac.png", "https://habrastorage.org/webt/37/bf/om/37bfomzqqcapediljrf14flpuiu.png", "https://habrastorage.org/webt/k5/v6/hc/k5v6hcxebj6hfdgbitfwyzs1ffw.png", "https://habrastorage.org/webt/zc/h4/mp/zch4mpfwyybln76dl1jnhpxjt0s.png", "https://habrastorage.org/webt/u0/cu/zc/u0cuzcnbhzppwdhpibm2o6zelpk.png", "https://habrastorage.org/webt/jy/d4/9s/jyd49satpc3erdlzeddi44gwcy4.png", "https://habrastorage.org/webt/kv/-p/lj/kv-pljob3duk3bigzj3iazcsasa.png", "https://habrastorage.org/webt/k8/zt/uv/k8ztuv4eccjueyvlk8gigjbmkj0.png", "https://habrastorage.org/webt/il/og/h6/ilogh6wuak7zym8unedcnddcjr4.png", "https://habrastorage.org/webt/30/yh/4m/30yh4m_l52nvlkdixrv9zmivehc.png"]}}, {"title": ["Виртуальный мир Intel. Практика"], "post": {"text": "В данной статье я хочу рассмотреть практические аспекты созданиягипервизора на основе технологии аппаратной виртуализации Intel VMX.Аппаратная виртуализация достаточно узкоспециализированная область системного программирования и не имеет большого комьюнити, в России уж точно. Я надеюсь, что материал статьи поможет тем, кто захочет открыть для себя аппаратную виртуализацию и те возможности которые она предоставляет. Как было сказано в начале, я хочу рассмотреть именно практический аспект без погружения в теорию, поэтому предполагается что читатель знаком с архитектурой x86-64 и имеет хотя бы общее представление о механизмах VMX..Начнем с постановки задач для гипервизора:В качестве гостевой ОС я выбрал Windows 7 x32, в которой были заданы следующие ограничения:Для того чтобы гипервизор запускался при старте PC я выбрал самый простой путь, а именно записал свой загрузчик в MBR сектор диска на который установлена гостевая ОС. Так же нужно было где-то на диске разместить код гипервизора. В моем случае, оригинальная MBR считывает bootloader начиная с 2048 сектора, что дает условно свободную область для записи в (2047 * 512) Кб. Этого более чем достаточно для размещения всех компонентов гипервизора.Ниже приведена схема размещения гипервизора на диске, все значения заданы в секторах.Процесс загрузки происходит следующим образом:Хочу обратить внимание на то что загрузчик после перехода в long mode больше не может пользоваться сервисами BIOS для работы с физическими дисками, поэтому для чтения диска я использовал «Advance Host Controller Interface».Более подробно о котором можно почитать.После того как гипервизор получает управление его первая задача заключается в том, чтобы инициализировать окружение в котором ему предстоит работать, для этого последовательно вызываются функции:Далее необходимо убедиться что процессор поддерживает VMX, проверка выполняется функцией:Если все в порядке и гипервизор работает на процессоре, поддерживающем аппаратную виртуализацию переходим к начальной инициализации VMX, смотрим функцию:Выполнение гостевой ОС начнется в реальном режиме с адреса 0x7C00 по которому, как мы помним, загрузчик loader.main размещает win7.mbr. Для того чтобы воссоздать виртуальную среду идентичную той в которой обычно выполняется mbr, вызывается функциякоторая устанавливает регистры vmx non-root следующим образом:Следует обратить внимание на то что поле limit дескрипторного кэша для сегментных регистров DS и ES равно 0xFFFFFFFF. Это пример использования unreal mode — особенности процессора x86 позволяющей обходить лимит сегментов в реальном режиме. Подробней об этом можно почитать.Находясь в vmx not-root режиме гостевая ОС может столкнутся с ситуацией, когда необходимо вернуть управление хосту в режим vmx root. В таком случае происходит VM exit во время которого сохраняется текущее состояние vmx non-root и загружается vmx-root. Инициализация vmx-root выполняется функцией, которая устанавливает следующее значение регистров:Далее выполняется создание гостевого физического адресного пространства (функция). Это один из самых важных моментов при создании гипервизора, потому что неправильно заданный размер или тип на каком-нибудь из участков памяти могут привести к ошибкам которые могут и не проявить себя сразу, но с большой вероятностью будут приводит к неожиданным тормозам или зависаниям гостевой ОС. В общем приятного тут мало и лучше уделить настройке памяти достаточно внимания.На следующем изображении приведена модель гостевого физического адресного пространства:Итак, что мы тут видим:Информацию для создания таких областей я взял из утилиты RAMMap (вкладка Physical Ranges) так же я воспользовался данными из Windows Device Manager. Разумеется, на другом PC диапазоны адресов скорее всего будут отличаться. Что касается типа гостевой памяти, в моей реализации тип определяется только значением, указанным в таблицах EPT. Это просто, но не совсем корректно и вообще следует учитывать тот тип памяти который хочет установить гостевая ОС в своей страничной адресации.После того как завершено создание гостевого адресного пространства, можно перейти к настройкам VM Execution control field (функция). Это довольно большой набор опций, которые позволяют задать условия работы гостевой ОС в режиме vmx not-root. Можно, к примеру, отслеживать обращения к портам ввода вывода или контролировать изменение MSR регистров. Но нашем случае я использую только возможность контролировать установку определенных бит в регистре CR0. Дело в том, что 30(CD) и 29(NW) биты общие как для vmx non-root так и для vmx root режимов и если гостевая ОС установит эти биты в 1 это негативно скажется на производительности.Процесс настройки гипервизора почти завершен, осталось только установить контроль за переходом в гостевой режим vmx non-root и возвращением в режим хоста vmx root. Настройки задаются в функциями:настройки для перехода в vmx non-root:настройки для перехода в vmx root:Теперь, когда все настройки выполнены, функцияпереводит процессор в режим vmx non-root и начинает выполняться гостевая ОС. Как я упоминал ранее, в настройках vm execution control могут быть заданы условия, при возникновении которых гипервизор вернет себе управления в режиме vmx root. В моем простом примере, я предоставляю гостевой ОС полную свободу действий, однако в некоторых случаях гипервизор все же должен будет вмешаться и скорректировать работу ОС.Написанный в качестве примера к статье гипервизор вполне способен поддерживать стабильную работу гостевой ОС, хотя конечно и не является законченным решением. Не используется Intel VT-d, реализована поддержка только одного логического процессора, нет контроля за прерываниями и работой периферийных устройств. В общем я не использовал почти ничего из богатого набора средств, которые предоставляет Intel для аппаратной виртуализации. Впрочем, если сообщество заинтересуется я продолжу писать про Intel VMX, тем более что написать есть о чем.Да, чуть не забыл, отладку гипервизора и его компонентов удобно проводить с помощью Bochs. На первое время это незаменимый инструмент. К сожалению, загрузка гипервизора в Bochs отличается от загрузки на физическом PC. В свое время я делал специальную сборку чтобы упростить этот процесс, постараюсь привести исходники в порядок и так же выложить вместе с проектом в ближайшее время.На этом все. Спасибо за внимание.", "img": ["https://habrastorage.org/webt/ek/tv/_z/ektv_zcfq5gcq4bslygiyc2lbqc.jpeg", "https://habrastorage.org/webt/ba/ej/ae/baejaecukny9u7mi6b8udh9crfo.jpeg", "https://habrastorage.org/webt/lm/7b/ll/lm7bllv6hrh9kjv4aoopbzapz1q.jpeg", "https://habrastorage.org/webt/gx/br/cg/gxbrcgcfoiara6ivchp_lm0hgja.jpeg"]}}, {"title": ["Загрузочный CD и ретро-игра в одном твите"], "post": {"text": "Несколько лет назад я создал, которые помещались в один твит. С тех пор Twitter удвоил длину твитов, поэтому я решил создать загрузочный компакт-диск. Он работает под управлением немного улучшенной версии tron.Код в твите создаёт загрузочный образ диска CD-ROM:. Вы можете загрузить код в qemu или свою любимую виртуальную машину — и играть с помощью клавиш со стрелками. Вы даже можете записать iso на CD-R и загрузиться на реальном компьютере.Чтобы создать вручную образ CD, сначала нужно получить базовое представление об. К сожалению, документы со стандартами ISO обычно дорого стоят. Однако ISO 9660 совпадает с, так что спецификации можно прочитать бесплатно.У ISO 9660 множество расширений, таких как UDF, El Torito, RockRidge, Joliet и др. Для загрузочных образов нам важен только. Спецификация El Torito, на мой взгляд, плохо написана. Там есть ошибки (например, последняя строка в таблице 7), легко забыть, что значения шестнадцатеричные (не указаны префиксы), цифры не отсортированы в интуитивном порядке и т.д. К счастью, документ совсем небольшой.Чтобы создать загрузочный диск, начинаем с записи 17 пустых секторов, за которыми следует набор дескрипторов томов (Volume Descriptor Set). Каждый сектор 2048 байт.Примечание. Спецификация ISO-9660 говорит, что Volume Descriptor Set начинается с сектора 16. Спецификация El Torito требует начало загрузочной записи в секторе 17. Технически, следует поместить фиктивный дескриптор тома в сектор 16, но и без него всё нормально работает.Пишем первый дескриптор тома:В следующем секторе размещается Volume Descriptor Set Terminator:За дескрипторами томов следует загрузочный каталог (Boot Catalog). El Torito поддерживает разные режимы эмуляции. CD-ROM может эмулировать загрузочную дискету, загрузочный HDD и т.д. Я не устанавливал эмуляцию, то есть BIOS загрузит определённое количество секторов — и возьмёт наш загрузчик.Контрольная сумма вычисляется так, что все 16-битные значения в записи суммируются до 0 (mod 65536).Первая запись в загрузочном каталоге (проверочная запись):Вторая запись (дефолтная):Потом нули до конца сектора:Следующий сектор — наш загрузчик и ретро-игра:Затем я написал скрипт для компиляции загрузчика, сборки образа и генерации твита. Наконец, я прожёг CD и проверил, что.", "img": ["https://habrastorage.org/getpro/habr/post_images/656/ee4/2fe/656ee42fe767daa9c4720b24cfc43021.png"]}}, {"title": ["Недостатки фриланса. Личный опыт"], "post": {"text": "Это еще один пост из постоянной рубрики «фриланс vs. офис». На разных фриланс тусовках, да и стоящие рядышком удаленщики, все чаще говорят о том, что работа переезжает на «удаленные рельсы». Эта знаменитая фраза — «Лучшие разработчики живут не в Сан-Франциско, а по всему миру». Проекты с полностью удаленными командами вроде basecamp. В целом рост бирж за последнии несколько лет в разы — наводят на мысль, что удаленка и фриланс — это зарождение клондайка.Развалившись в гамаке, на берегу острова Бора Бора, ты неспешно рисуешь скетч или отрабатываешь навыки js-ниндзя.В левой руке махито, в правой мулат(ка). И основным обременяющим занятием есть поход к банкомату.Может так и бывает, но уж точно не у меня. Поэтому, проработав 12 лет на фрилансе (около 11,000 часов), внезапно, я задумался — а что дальше? А почему я топчусь на месте то. Пусть у единиц, но получается расти дальше, расширять базу клиентов, основывать компании, интересно жить в конце концов.Поэтому этот пост с СЕО-шным названием будет именно о том, что не так во фрилансе со «своей колокольни». Во-первых самоанализа ради. А во-вторых для того парня из офиса, который мылится работать на себя, да все никак… За 12 лет много опыта накопилось, есть чем поделиться. Много примеров из опыта.Начало во фрилансе — это такая лотерея, с элементами унижений, отчаяния, возможно разбитых надежд. Я конечно драматизирую, в контексте тех хитрых ребят, которые увели чьего-то заказчика или нашли его на стороне и привели на Upwork. Да, кстати, речь в этом посте пойдет именно про биржу Upwork, если не указано обратное. Именно на ней я провел 12 лет с перерывами.Так вот, очевидный момент. Если у тебя голый профайл и нет отзывов о прошлых работах — то искать тебе и искать эту долгожданную работенку на 50$. Не верите? Вот только был случай. Нанимал ребят iOS и Android разрабов. Сделали довольно хорошо часть программы, за которую я получил 1200$, их же интересовал только фидбек. Не хвальбы ради, а скорее для подтверждения факта, насколько важна репутация и опыт во фрилансе.Посему начинать всегда тяжело. Демпинговать, спамить, «просить звездочку», нескончаемые доделки переделки — все это обязательный атрибут первых заказов на фрилансе.Да, если ты студент, и качаешь например Ruby, то почему бы не покачать. А вот если войти-вайтишник, с ярым желанием заработать — то будет не просто.У меня история с фрилансом началась в 2006 году, когда не было еще толпы индусов, а биржа называлась oDesk. Я был студеном (не голодным), дал объявление в газету! Меня нашел какой-то местный фрилансер и заверте…По 6$/час я с большой радостью писал программки американским студентам, а не своим. Потом попался крупный клиент и мы дружно переехали с agency, на мой индивидуальный профайл, чтоб не платить посреднику.Как правило неадекват. Ясно понимая, что все козыри у него распиханы по рукавам, как то — твой первый отзыв, первый заработанный доллар, да и вообще все в первой. Этот парень будет выжимать тебя, как спелый лимон. И вряд ли у тебя будет много контраргументов, вроде распальцевки — «this is extra» или «this is impossible». За пол дня будь добр сделай.Да, да. Вы скажете — надо знать себе цену, показать черный пояс по Ангуляр, но мы же говорим о недостатках. И поверьте моему опыту заказчика — довольно легко требовать работу с новичка, за минимум платы и максимум эфорта. Это бизнес.Слез с дивана. Взял ноут. Залез на диван. За стенкой — 3 воющие сирены в виде малышей и жены. Сверху перфоратор.Так и заснул на диване, ничего не сделав…Дисциплина — это первое, чему нужно научится фрилансеру. Сюда же входит режим, питание, прогулки, время на себя, итд., итп.Шалтай-балтай — не получится. Все таки не Шон Паркер. И надо руку держать на пульсе (телефоне) все время. Ребята из бизнеса не очень любят, когда им не отвечают.В продолжении предыдущего пункта — режим, слово довольно размытое для фрилансера. Это вам не 9-18 и суббота выходной.Это 24/7, без выходных и праздников. Опять могу преувеличивать, но если вы хотите быстро подняться, придется работать как владелец бизнеса, то бишь все время за пультом. Это спустя время, можно перебирать харчами, и выбрать себе одного европейца парт-тайм, одного лояльного американца, который чтит все праздники и выходные на Руси. А по началу вигвам.Могут кинуть. Куда ж без этого. Справедливости ради скажу, что со мной это происходило один или два раза из около 60 проектов. Суммы небольшие, но очень неприятно, когда стараешься — а клиент пропадает с твоей работой.Западло номер два — программы-трекеры. Не поесть, не пописать. Все время держит в напряжении, вырабатывая какую-то неведомую привычку «побольше-высидеть-часов». Бывали случаи у знакомых, когда после 15-часовых марафонов под трекером — они слышали Европу+ из раковины. А некоторым казалось, что за ними следят на улице. Со мной такого не было — но голова болела знатно, уже после 6 часов непрерывного кодинга.Как альтернативу почасовке, Бог придумал fixed-price с escrow. Скажем так. Слово escrow, то бишь гарантия выплаты, работает только до обращения клиента в сапорт с просьбой вернуть деньги. Ко всему прочему, выбивать по 300-500-1000 долларов, надо еще уметь, то бишь обосновать. В этом плане почасовка проще в плане разговоров о деньгах с клиентом.Ну и самая мякотка — это когда можно добавлять потраченное время в ручную. Так работает большинство крупных контор в офисе, также можно и договорится с человеком, когда есть. Со временем уже фрилансер диктует условия.Его нет. Только не надо пожалуйста про коворкинги или снять хату с корешами. Сам молча стучишь по клаве до выпученных глаз. Никто не мешает сходить в группы Анонимных Алкоголиков, поговорить? Хмм… это смотря как работать. Обычно к концу дня желание одно — лечь и потупить. Фриланс — это не печеньки. Фриланс — это не настолки и тренажерка внизу. Фриланс — это сколько отработал — столько получил. Поэтому здесь 8-10 часов по нагрузке сравнимо с 2-3 днями в офисе.Не забудьте про трекер.А как же друзья, семья, знакомые? Ну что я вам скажу. Если друзья фрилансеры — то ситуация примерно такая же. Ваше общение потихоньку переходит в скайп-чатик, и на этом дружба заканчивается. Семья, знаете ли, каждый занят своим делом.А папа — приставка для компьютера. Чего его беспокоить? Вот и получается раз в квартал собираемся.На всяких ивентах, со знакомыми, чаще чувствуешь себя белой вороной, нежели приобщенным к делу индивидом.Тут у людей карьерный рост, обсуждение политики и селебрети. А тебе оно зачем? У тебя же есть трекер… и IDE.В дополнение к предыдущему. Она атрофируется. Если вы конечно не продажник на удаленке — то фрилансер медленно, но верно выпадает из общества. Люди разные, кто-то выбирает одиночество, кто-то жить не может без людей, но справедливо, что выбирая фриланс — вы сознательно замыкаетесь в себе. Контакты с людьми все реже. Какие-то жизненные мелочи, вродепохода в кино — становятся бессмысленными. Тебя некому пушить!У них же как ведь? — Один побёг и айда за мной! — «А мартышка смотрит, мартышка повторяет», вот так и получается.То же занятие спортом. Ты уже взрослый дядя, видишь, что здоровьечко то надо поддерживать, нагружать себя. — А ты поди себя заставь, вот просто так, регулярно ходить в спортзал. Дошло до того, что я организовал спортзал дома. Но мотивация соответствующая.… Пенсионный фонд. Тут все как в этой песне. Работая недолгое время в компании, у меня было официальное место работы, мед.страховка, абонементы в фитнес клуб и библиотеку. Разумеется железо для работы, которое по щелчку могли поменять на любое другое.Не скажу, что на фрилансе, отсутствие «печенек» меня сильно напрягает — зато свобода…Пару слов о свободе. Люди, которые далеки от фриланса, думают, что мол куда захотел — туда пошел. Взял ноут, сел на самолет и йухууу!Ну во-первых ноут — это может копирайтеру хватит. А мне нужен мощный комп, 2 монитора и макбук для тестов. Плюс быстрый инет.И второе заблуждение по поводу свободы. Да, хоть ты и не сидишь в кубикле целый день, но клиенты виртуально держат за кокосы, постоянно теребя мессенджер. В свою очередь — не ответить довольно проблематично. А клиенты из разных таймзон. И вот ты в 2 часа тестируешь софт, на рассвете воскресенья деплоишь в прод, а посреди недели тебе пишут 3 человека синхронно, что у них дедлайн. Такая гипертрофированная свобода.Немного о здоровье. Дело в том, что лайфстайл фрилансера подразумевает полную свободу действий. Да, это противоречит пункту выше, но вас в любом случае никто и ничего не сдерживает, например напиться до поросячьего визга посреди недели.Такая разнузданность приводит ксо временем.То бишь запросто можно развлекать себя бутылкой, чуть ли не каждый день. С работы не выгонят. Деньги как правило есть.Ну и в довесок малоподвижный образ жизни может превратить фрилансера в развалину еще до 40-ка.Пожалуй на этом можно закончить список недостатков фриланса. Обладая критическим и/или креативным мышлением — все эти грабли обходятся. Мое дело было поделиться опытом и возможно снять с кого-то розовые очки.Для баланса во Вселенной, следующей планирую статью — Как стать успешным фрилансером.", "img": ["https://habrastorage.org/webt/hh/o3/lw/hho3lwehvgqwntfcr-p5qwnpgvg.png"]}}]